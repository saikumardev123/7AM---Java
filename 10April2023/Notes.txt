Collection Framework:

Collection Framework is an abstraction of Data Structures where predefined 
functions are provided to respective data structures in Java. 

Because of CF, The implementation of DS is simple. 

java.util packages provides Collection Framework related classes and 
interfaces.

* Collection interface is the top interface that provides the required 
utilities for any data structure.

Collection Framework Hierarchy: https://www.google.com/search?q=collection+framework+hierarchy&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi5yJznmZ7-AhWhpOkKHblLAOgQ_AUoAXoECAEQAw&biw=1440&bih=821&dpr=1#imgrc=DNxELAPSG0FRYM 

Set interfaces:

The direct implementation classes of Set interface is HashSet and LinkedHashSet. 


HashSet:

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

public class SetDemo {
	
	public static void main(String[] args) {
		
		
		 // HashSet 
		
		/*
		 *   Order of insertion is not guranteed.
		 *   Can store any type of Object
		 *   Duplicate entries are not considered.
		 * 
		 */
		
		  HashSet<Object> hashSet = new HashSet<Object>();
		  
		  hashSet.add(10);
		  hashSet.add(20);
		  hashSet.add(40);
		  hashSet.add("hello");
		  hashSet.add(true);
		  hashSet.add(false);
		  hashSet.add(10);
		  hashSet.add(20);
		  hashSet.add(40);
		  hashSet.add("hello");
		  hashSet.add(true);
		  hashSet.add(false);
		  
		  hashSet.remove(true);
		  System.out.println(hashSet);
//		  System.out.println(hashSet);
//		  System.out.println(hashSet.contains("hello"));
//		  System.out.println(hashSet.isEmpty());
//		  System.out.println(hashSet.size());
		  
		  // Iterator
		  
		   Iterator<Object> it =  hashSet.iterator();
		   while(it.hasNext()) {
			   System.out.println(it.next());
		   }
		   
//		   ArrayList<Object> al= new ArrayList<Object>(hashSet);
//		   
//		   System.out.println(al);
//		   
//		   System.out.println(al.get(2));
		   
		
	}

}

 

 LinkedHashSet: 

 It is the sub class of HashSet. 


		 // LinkedHashSet 
		
		/*
		 *   Order of insertion is guranteed.
		 *   Can store any type of Object
		 *   Duplicate entries are not considered.
		 * 
		 */

   LinkedHashSet<Object> linkedhashSet = new LinkedHashSet<Object>();
		   linkedhashSet.add(10);
		   linkedhashSet.add(20);
		   linkedhashSet.add(40);
		   linkedhashSet.add("hello");
		   linkedhashSet.add(true);
		   linkedhashSet.add(false);
		   System.out.println("hey");
		   System.out.println("hello"+ linkedhashSet); 


The only difference between hashSet and linkedhashSet is, hashSet does 
not gurantee the insertion order where as linkedhashSet does.

Realtime example:

import java.util.HashSet;

class Customer{	
	   private String name;
	   private String address;
	   private long accountNumber;
	public Customer(String name, String address, long accountNumber) {
		super();
		this.name = name;
		this.address = address;
		this.accountNumber = accountNumber;
	}
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return this.name + "\t"+ this.address + "\t"+ this.accountNumber;
	}
}

public class HashSetRealtimeDemo {

	  public static void main(String[] args) {
		 
		  Customer customer1= new Customer("c1","hyd", 1023L);
		  Customer customer2= new Customer("c2","bgl", 1021L);
		  Customer customer3= new Customer("c3","chennai", 1223L);
		  Customer customer4= new Customer("c4","lucknow", 12023L);
		  Customer customer5= new Customer("c5","hyd", 10723L);
		  
		   HashSet<Customer> hs = new HashSet<Customer>();
		   
		   Customer[] customers = {customer1,customer2,customer3,customer4,customer5};
		   
		     for(int i=0;i<customers.length;i++) {
		    	  hs.add(customers[i]);
		     }
		     
		     System.out.println(hs);
		
		  
	}
	
}




