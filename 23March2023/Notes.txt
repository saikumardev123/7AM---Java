Abstract classes:

When a class does not provide implementation for all the methods of 
an interface, then that class must be declared as abstract class. 


interface A1{
	 void m1();
	 void m2();
	 void m3();
}

abstract class A1Impl implements A1{
	public void m1() {
		System.out.println("m1()");
	}
	public void m2() {
		System.out.println("m2()");
	}
	
	public abstract void m3();
}

class A1ImplChild extends A1Impl{
	public  void m3() {
		
		System.out.println("m3()");
	}
}

public class AbstractClassesDemo {
	public static void main(String[] args) {
		A1 a = new A1ImplChild();
		a.m1();
		a.m2();
		a.m3();
	}

}



Composition / Aggregation( has- a):

* Inheritance follows is-a relationship. 


class A{

}
class B extends A{

}

A is a part of B ->  is-a relationship. 

class Engine{

}
class Tyres{

}
class Vehicle extends Engine,Tyres{


}


The above can be represented using composition / aggregation. 

class Engine{

}

class Tyres{

}
class AudioSystem{

}

class Vehicle{
      Engine e1;
      Tyres t1;
      AudioSystem audio;
}

Vehicle (has a) engine, tyres, audisystem.

Encapsulation:

Encapsulation is the process of binding the data and its related code 
into a single unit. 

To represent an entity, provide relationships across the entities, 
provide security , we use Encapsulation. 

without Encapsulation, we cannot achieve Inheritance, polymorphism and 
abstraction. 

Best example for encapsulation is class.

class Product{
     String name;
     int pid;
     int price;
     String getProductDetails(){
            // logic - data processing
         return "some data";

     }
}

Securing the code using encapsulation is possible through access specifiers. 

we can use private keyword to specify an access specifier to restrict 
the resource(variable, method) to be accessed with in the class. 


Problem Statement:
Implement a simple banking system app with the following features. 
objects: bank -> customer
1. creating customers
2. updating the customer information 
3. transfer of funds from one account to another account. 







