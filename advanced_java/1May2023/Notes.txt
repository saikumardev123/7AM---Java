Maven: 

Maven is a build tool which helps in providing dependencies for the projects. 

Maven has a repository that provides the dependencies. 


Hibernate App:

pom.xml:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.firstpp.hibernate</groupId>
  <artifactId>HiberanteDemo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>HiberanteDemo</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>

  <dependency>  
    <groupId>org.hibernate</groupId>  
    <artifactId>hibernate-core</artifactId>  
    <version>5.3.1.Final</version>  
</dependency> 
<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.33</version>
</dependency>

  </dependencies>
</project>



Movies: 

package com.firstpp.hibernate;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table
public class Movies {
	
	@Id
	@Column
	@GeneratedValue
	private int id;
	@Column
	private String name;
	@Column
	private String releaseDate;
	@Column
	private long budget;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getReleaseDate() {
		return releaseDate;
	}
	public void setReleaseDate(String releaseDate) {
		this.releaseDate = releaseDate;
	}
	public long getBudget() {
		return budget;
	}
	public void setBudget(long budget) {
		this.budget = budget;
	}
}


App.java:
package com.firstpp.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
      StandardServiceRegistry standardServReg =  new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();
      
      Metadata metaData =  new MetadataSources(standardServReg).getMetadataBuilder().build();
      
      SessionFactory sessionFactory= metaData.getSessionFactoryBuilder().build();
      
      System.out.println("sessionFactory"+ sessionFactory);
      
     Session session =  sessionFactory.openSession();
     
        Transaction transaction =  session.beginTransaction();
        
        Movies movies = new Movies();
          movies.setBudget(9899);
          movies.setName("xyz");
          movies.setReleaseDate("12oct2023");
        session.save(movies);
        transaction.commit();
      
    }
}


hibernate.cfg.xml:

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC  
        "-//Hibernate/Hibernate Configuration DTD 5.3//EN"  
        "http://www.hibernate.org/dtd/hibernate-configuration-5.3.dtd"> 
        <hibernate-configuration>
        
             <session-factory>
             
             <property name="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>  
             <property name="connection.url">jdbc:mysql://localhost:3306/ottplatform</property>
              <property name="connection.username">root</property>    
        <property name="connection.password">ipl2021@dubai</property>    
        <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>     
        <property name="hbm2ddl.auto">update</property> 
        <property name="show_sql">true</property>
         <mapping class="com.firstpp.hibernate.Movies"/>
             
             </session-factory>
        
        </hibernate-configuration>

        